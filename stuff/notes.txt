k -> number of successes
n -> number of trials
p = Probability of success
P -> probability for success

# import numpy as np

# print(np.random.binomial(1000, 0.05, 1000))


# vid 1 3:53
# import random

# l = []

# for i in range(100):
#     success = []
#     for i in range(10):
#         if random.uniform(0, 1) < 0.95:
#             success.append(1)
#         else:
#             success.append(0)

#     l.append(success.count(1))


# print(l.count(10))


# import pandas as pd
from scipy.stats import binom
# import matplotlib.pyplot as plt

# number_of_trials = 100
# prob_of_success = 0.7

# # pmf = probability mass function
# # p(binom.pmf(10, number_of_trials, prob_of_success))


# successes = {"successes": list(range(0, number_of_trials + 1))}
# print(successes)

# binom_table = pd.DataFrame(successes)
# print(binom_table)

# prob = lambda x: binom.pmf(x, number_of_trials, prob_of_success)
# binom_table["prob"] = binom_table["successes"].apply(prob)
# print(binom_table)

# binom_table["prob"].plot.bar(x = "successes", y = "prob")
# plt.show()





# https://www.youtube.com/watch?v=Y2-vSWFmgyI
from matplotlib import pyplot as plt
import numpy as np

# formula
# k -> number of successes
# n -> number of trials
# p-> probability of success
# P(k) = (n su k) * p**k * (1-p)**k

# binom.pmf(successes, number_of_trials, prob_of_success)

# mean -> mu -> n*p

# when p is equal to 0.5 the graph is simetrical, else tends to left or right
p = 0.5  # shape of the graph depends on p
n = 2

# number of throws
x = range(n) # n

# y = [binom.pmf(throw, len(x), p) * 100 for throw in x]

# # x -> number of successes, y -> probability of successes
# plt.plot(x,y,color = "#5a7d9a",marker = "o",label = "Python Devs")

s = np.random.binomial(n, p, 1000)
print(s)

plt.hist(s)

# plt.hist(x)
plt.xlabel("number of successes")
plt.ylabel("probability of event")

plt.show() 